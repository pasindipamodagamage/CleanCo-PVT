img not loading
user action active deactive weda hebei show wenne table eke. eke ain krnna eye eka
eke table eka hdnnth one

// document.addEventListener('DOMContentLoaded', function () {
//     // Inside loadServiceCartDetails or separately after it's loaded
//     $('#cartServiceList').on('click', '.buy-plan-btn', function () {
//         const token = localStorage.getItem("authToken");
//         const categoryId = $(this).data('category-id');
//
//         if (!token || !categoryId) {
//             alert("User not logged in or invalid category.");
//             return;
//         }
//
//         // Fetch logged-in user's ID
//         fetch("http://localhost:8082/api/v1/user/me", {
//             headers: {
//                 "Authorization": "Bearer " + token
//             }
//         })
//             .then(response => {
//                 if (!response.ok) throw new Error("Failed to fetch user data");
//                 return response.json();
//             })
//             .then(data => {
//                 const userId = data.data.userId; // Adjust according to your DTO
//                 if (!userId) throw new Error("User ID not found");
//
//                 // Send booking request
//                 $.ajax({
//                     url: 'http://localhost:8082/api/v1/booking',
//                     type: 'POST',
//                     contentType: 'application/json',
//                     headers: {
//                         "Authorization": "Bearer " + token
//                     },
//                     data: JSON.stringify({
//                         userId: userId,
//                         categoryId: categoryId
//                         // Backend will set bookingDate, bookingTime, and status as PENDING
//                     }),
//                     success: function (res) {
//                         if (res.code === 201 || res.status === 'success') {
//                             alert('Booking created successfully and marked as pending!');
//                         } else {
//                             alert('Something went wrong: ' + res.message);
//                         }
//                     },
//                     error: function (xhr) {
//                         console.error("Booking failed:", xhr);
//                         alert('Booking failed. Please try again.');
//                     }
//                 });
//             })
//             .catch(err => {
//                 console.error("Error getting user ID:", err);
//                 alert('Error retrieving user info.');
//             });
//     });
// });

<!-- My Profile Section -->
<div id="my-profile" class="content-section">
    <h2 class="mb-4">My Profile</h2>
    <div class="card">
        <div class="card-body">
            <form id="updateProfileForm">
                <div class="row mb-4">
                    <div class="col-md-3 text-center">
                        <img id="profilePicPreview" src="/static/assets/default-avatar.jpg" alt="Profile Picture"
                             class="profile-picture mb-3" style="width: 150px; height: 150px; object-fit: cover; border-radius: 50%;">
                        <input type="file" id="profilePicInput" name="profilePicFile" accept="image/*" class="form-control mb-2">
                        <input type="hidden" id="profilePic" name="profilePic">
                        <button type="button" id="uploadProfilePicBtn" class="btn btn-sm btn-primary">Upload</button>
                    </div>

                    <div class="col-md-9">
                        <!-- Name -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="firstName" class="form-label">First Name</label>
                                <input type="text" class="form-control" id="firstName" name="name.firstName" placeholder="First Name">
                            </div>
                            <div class="col-md-6">
                                <label for="lastName" class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" name="name.lastName" placeholder="Last Name">
                            </div>
                        </div>

                        <!-- NIC -->
                        <div class="mb-3">
                            <label for="nicNumber" class="form-label">NIC Number</label>
                            <input type="text" class="form-control" id="nicNumber" name="nicNumber" placeholder="NIC Number">
                        </div>

                        <!-- Address -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="locationNumber" class="form-label">Address Line 1 (Location Number)</label>
                                <input type="text" class="form-control" id="locationNumber" name="address.locationNumber" placeholder="Location Number">
                            </div>
                            <div class="col-md-6">
                                <label for="street" class="form-label">Address Line 2 (Street)</label>
                                <input type="text" class="form-control" id="street" name="address.street" placeholder="Street">
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="city" class="form-label">City</label>
                                <input type="text" class="form-control" id="city" name="address.city" placeholder="City">
                            </div>
                            <div class="col-md-6">
                                <label for="district" class="form-label">District</label>
                                <select class="form-select" id="district" name="address.district">
                                    <option value="">Select District</option>
                                    <option value="Colombo">Colombo</option>
                                    <option value="Gampaha">Gampaha</option>
                                    <!-- Add other districts as needed -->
                                </select>
                            </div>
                        </div>

                        <!-- Contacts -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="primaryContact" class="form-label">Primary Contact</label>
                                <input type="tel" class="form-control" id="primaryContact" name="primaryContact" placeholder="Primary Contact">
                            </div>
                            <div class="col-md-6">
                                <label for="secondaryContact" class="form-label">Secondary Contact</label>
                                <input type="tel" class="form-control" id="secondaryContact" name="secondaryContact" placeholder="Secondary Contact">
                            </div>
                        </div>

                        <!-- Email -->
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="Email">
                        </div>

                        <!-- Change Password -->
                        <hr>
                        <h5>Change Password</h5>
                        <div class="mb-3">
                            <label for="currentPassword" class="form-label">Current Password</label>
                            <input type="password" class="form-control" id="currentPassword" name="currentPassword" placeholder="Current Password">
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="password" class="form-label">New Password</label>
                                <input type="password" class="form-control" id="password" name="password" placeholder="New Password">
                            </div>
                            <div class="col-md-6">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm Password">
                            </div>
                        </div>

                        <!-- Save Button -->
                        <div class="text-end">
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
            <!-- Bookings Management -->
            <div class="main-content d-none" id="bookingsContent">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="fw-bold mb-0">My Bookings</h2>
                    <button class="btn btn-primary" id="newBookingBtn">New Booking</button>
                </div>

                <ul class="nav nav-tabs" id="bookingsTab" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="upcoming-tab" data-bs-toggle="tab" data-bs-target="#upcoming" type="button">Upcoming</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button">History</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="cancelled-tab" data-bs-toggle="tab" data-bs-target="#cancelled" type="button">Cancelled</button>
                    </li>
                </ul>

                <div class="tab-content mt-3" id="bookingsTabContent">
                    <div class="tab-pane fade show active" id="upcoming" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="mb-0">April 18, 2025</h5>
                                    <span class="badge bg-info">Confirmed</span>
                                </div>
                                <p><strong>Service:</strong> Premium Cleaning</p>
                                <p><strong>Time:</strong> 9:00 AM - 12:00 PM</p>
                                <p><strong>Address:</strong> 123 Main St, Apt 4B, Galle</p>
                                <div class="d-flex gap-2 mt-3">
                                    <button class="btn btn-outline-primary btn-sm">Reschedule</button>
                                    <button class="btn btn-outline-danger btn-sm">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="history" role="tabpanel">
                        <div class="list-group">
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <h5 class="mb-1">April 5, 2025</h5>
                                    <span class="badge bg-success">Completed</span>
                                </div>
                                <p class="mb-1"><strong>Service:</strong> Premium Cleaning</p>
                                <small class="text-muted">9:00 AM - 12:00 PM</small>
                                <div class="mt-2">
                                    <button class="btn btn-sm btn-outline-primary">View Details</button>
                                    <button class="btn btn-sm btn-outline-success">Leave Feedback</button>
                                </div>
                            </div>
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between">
                                    <h5 class="mb-1">March 22, 2025</h5>
                                    <span class="badge bg-success">Completed</span>
                                </div>
                                <p class="mb-1"><strong>Service:</strong> Premium Cleaning + Windows</p>
                                <small class="text-muted">1:00 PM - 4:00 PM</small>
                                <div class="mt-2">
                                    <button class="btn btn-sm btn-outline-primary">View Details</button>
                                    <button class="btn btn-sm btn-outline-success">Leave Feedback</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="cancelled" role="tabpanel">
                        <div class="alert alert-info">
                            You don't have any cancelled bookings.
                        </div>
                    </div>
                </div>
            </div>


<div class="card mb-4">
                    <div class="card-body">
                        <form id="bookingForm">
                            <div class="mb-3">
                                <label for="serviceType" class="form-label">Service Type</label>
                                <select class="form-select" id="serviceType" required>
                                    <option value="">Select a service</option>
                                    <option value="premium">Premium Cleaning</option>
                                    <option value="deep">Deep Cleaning</option>
                                    <option value="move">Move In/Out Cleaning</option>
                                    <option value="office">Office Cleaning</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="bookingDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="bookingDate" required min="">
                            </div>

                            <div class="mb-3">
                                <label for="timeSlot" class="form-label">Time Slot</label>
                                <select class="form-select" id="timeSlot" required>
                                    <option value="">Select a time slot</option>
                                    <option value="morning">9:00 AM - 12:00 PM</option>
                                    <option value="afternoon">1:00 PM - 4:00 PM</option>
                                    <option value="evening">5:00 PM - 8:00 PM</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Add-ons (optional)</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="windowCleaning">
                                    <label class="form-check-label" for="windowCleaning">Window Cleaning (+$35)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="fridgeCleaning">
                                    <label class="form-check-label" for="fridgeCleaning">Refrigerator Cleaning (+$40)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="carpetCleaning">
                                    <label class="form-check-label" for="carpetCleaning">Carpet Cleaning (+$50)</label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="specialInstructions" class="form-label">Special Instructions</label>
                                <textarea class="form-control" id="specialInstructions" rows="3"></textarea>
                            </div>

                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-outline-secondary" id="cancelBookingBtn">Cancel</button>
                                <button type="submit" class="btn btn-primary">Continue to Payment</button>
                            </div>
                        </form>
                    </div>
                </div>

package lk.ijse.cleancopvt.entity;

import jakarta.persistence.*;
import lk.ijse.cleancopvt.Enum.BookingStatus;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.UUID;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Data
public class Booking {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;
    private LocalDate bookingDate;
    private LocalTime bookingTime;
    @Enumerated(EnumType.STRING)
    private BookingStatus bookingStatus = BookingStatus.PENDING;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @JoinColumn(name = "category_id", nullable = false)
    private Category category;

}
package lk.ijse.cleancopvt.entity;

import jakarta.persistence.*;
import lk.ijse.cleancopvt.Enum.Duration;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Data
public class Category {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;
    private String name;
    private String description;
    private Duration duration;

    @ManyToMany(mappedBy = "categories")
    private List<ServicesSet> servicesSets = new ArrayList<>();

    @OneToMany(mappedBy = "category")
    private List<Booking> bookings = new ArrayList<>();

}package lk.ijse.cleancopvt.entity;

import jakarta.persistence.*;
import lk.ijse.cleancopvt.Embedded.Address;
import lk.ijse.cleancopvt.Embedded.Name;
import lk.ijse.cleancopvt.Enum.Role;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Data
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    private String profilePic;
    private String nicNumber;
    private Name name;
    private Address address;
    private Role role;
    @Column(nullable = false, columnDefinition = "BOOLEAN DEFAULT TRUE")
    private boolean active = true;
    private String primaryContact;
    private String secondaryContact;
    private String email;
    private String password;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private List<Booking> bookings = new ArrayList<>();

}

package lk.ijse.cleancopvt.controller;

import lk.ijse.cleancopvt.dto.BookingDTO;
import lk.ijse.cleancopvt.dto.ResponseDTO;
import lk.ijse.cleancopvt.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping("/api/v1/booking")
@CrossOrigin("*")
public class BookingController {

    @Autowired
    private BookingService bookingService;

    @Autowired
    private ResponseDTO responseDTO;

    @PostMapping("/addBooking")
    public ResponseEntity<String> addBooking(@RequestBody BookingDTO bookingDTO) {
        try {
            bookingService.createBooking(bookingDTO);
            return ResponseEntity.ok("Booking successfully added");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Error: " + e.getMessage());
        }
    }

    @PutMapping("/updatePaymentStatus/{bookingId}")
    public ResponseEntity<String> updateBookingAfterPayment(@PathVariable("bookingId") UUID bookingId) {
        try {
            bookingService.updateBookingStatusAfterPayment(bookingId, null);
            return ResponseEntity.ok("Booking payment status updated");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Error: " + e.getMessage());
        }
    }

    @PutMapping("/confirmBooking/{bookingId}")
    public ResponseEntity<String> confirmBooking(@PathVariable("bookingId") UUID bookingId) {
        try {
            bookingService.confirmBooking(bookingId);
            return ResponseEntity.ok("Booking confirmed");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Error: " + e.getMessage());
        }
    }

    @PutMapping("/rejectBooking/{bookingId}")
    public ResponseEntity<String> rejectBooking(@PathVariable("bookingId") UUID bookingId) {
        try {
            bookingService.rejectBooking(bookingId);
            return ResponseEntity.ok("Booking rejected");
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Error: " + e.getMessage());
        }
    }
}
<!-- New Booking Form -->
            <div class="main-content d-none" id="newBookingContent">
                <h2 class="fw-bold mb-4">New Booking</h2>

                <div class="card mb-4">
                    <div class="card-body">
                        <form id="bookingForm">
                            <div class="mb-3">
                                <label for="serviceType" class="form-label">Service Type</label>
                                <select class="form-select" id="serviceType" required>
                                    <option value="">Select a service</option>
                                    <option value="premium">Premium Cleaning</option>
                                    <option value="deep">Deep Cleaning</option>
                                    <option value="move">Move In/Out Cleaning</option>
                                    <option value="office">Office Cleaning</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="bookingDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="bookingDate" required min="">
                            </div>

                            <div class="mb-3">
                                <label for="timeSlot" class="form-label">Time Slot</label>
                                <select class="form-select" id="timeSlot" required>
                                    <option value="">Select a time slot</option>
                                    <option value="morning">9:00 AM - 12:00 PM</option>
                                    <option value="afternoon">1:00 PM - 4:00 PM</option>
                                    <option value="evening">5:00 PM - 8:00 PM</option>
                                </select>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Add-ons (optional)</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="windowCleaning">
                                    <label class="form-check-label" for="windowCleaning">Window Cleaning (+$35)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="fridgeCleaning">
                                    <label class="form-check-label" for="fridgeCleaning">Refrigerator Cleaning (+$40)</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="carpetCleaning">
                                    <label class="form-check-label" for="carpetCleaning">Carpet Cleaning (+$50)</label>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="specialInstructions" class="form-label">Special Instructions</label>
                                <textarea class="form-control" id="specialInstructions" rows="3"></textarea>
                            </div>

                            <div class="d-flex justify-content-between mt-4">
                                <button type="button" class="btn btn-outline-secondary" id="cancelBookingBtn">Cancel</button>
                                <button type="submit" class="btn btn-primary">Continue to Payment</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>package lk.ijse.cleancopvt.dto;

import lk.ijse.cleancopvt.Enum.BookingStatus;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class BookingDTO {

    private UUID userId;
    private UUID categoryId;
    private LocalDate bookingDate;
    private LocalTime bookingTime;
    private BookingStatus bookingStatus = BookingStatus.PENDING;
}package lk.ijse.cleancopvt.service.impl;

import lk.ijse.cleancopvt.Enum.BookingStatus;
import lk.ijse.cleancopvt.dto.BookingDTO;
import lk.ijse.cleancopvt.dto.PaymentDTO;
import lk.ijse.cleancopvt.entity.Booking;
import lk.ijse.cleancopvt.entity.Category;
import lk.ijse.cleancopvt.entity.User;
import lk.ijse.cleancopvt.repo.BookingRepo;
import lk.ijse.cleancopvt.repo.CategoryRepo;
import lk.ijse.cleancopvt.repo.UserRepo;
import lk.ijse.cleancopvt.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.UUID;

@Service
public class BookingServiceImpl implements BookingService {

    @Autowired
    private BookingRepo bookingRepo;

    @Autowired
    private UserRepo userRepo;

    @Autowired
    private CategoryRepo categoryRepo;

    @Override
    public void createBooking(BookingDTO bookingDTO) throws Exception {
        Optional<User> user = userRepo.findById(bookingDTO.getUserId());
        Optional<Category> category = categoryRepo.findById(bookingDTO.getCategoryId());

        if (!user.isPresent() || !category.isPresent()) {
            throw new Exception("Invalid User or Category ID");
        }

        Booking booking = new Booking();
        booking.setUser(user.get());
        booking.setCategory(category.get());
        booking.setBookingDate(bookingDTO.getBookingDate());
        booking.setBookingTime(bookingDTO.getBookingTime());
        booking.setBookingStatus(bookingDTO.getBookingStatus());

        bookingRepo.save(booking);
    }

    @Override
    public void updateBookingStatusAfterPayment(UUID bookingId, PaymentDTO paymentDTO) {
        Optional<Booking> bookingOptional = bookingRepo.findById(bookingId);
        if (bookingOptional.isPresent()) {
            Booking booking = bookingOptional.get();
            booking.setBookingStatus(BookingStatus.CONFIRMED);
            bookingRepo.save(booking);
        }
    }

    @Override
    public void confirmBooking(UUID bookingId) throws Exception {
        Optional<Booking> bookingOptional = bookingRepo.findById(bookingId);
        if (bookingOptional.isPresent()) {
            Booking booking = bookingOptional.get();
            booking.setBookingStatus(BookingStatus.CONFIRMED);
            bookingRepo.save(booking);
        } else {
            throw new Exception("Booking not found");
        }
    }

    @Override
    public void rejectBooking(UUID bookingId) throws Exception {
        Optional<Booking> bookingOptional = bookingRepo.findById(bookingId);
        if (bookingOptional.isPresent()) {
            Booking booking = bookingOptional.get();
            booking.setBookingStatus(BookingStatus.REJECTED);
            bookingRepo.save(booking);
        } else {
            throw new Exception("Booking not found");
        }
    }
} i want to add a booking category. use above classes and userId get from LocalStorage savedToken.categoryId

















password and prof pic can not update
inactive is working

    // View user
    $(document).on('click', '#usersTable .view-btn', function(e) {
    e.stopPropagation(); // Prevent row click event
    const row = $(this).closest('tr');
    const name = row.find('td:eq(1)').text();
    const email = row.find('td:eq(2)').text();
    const role = row.find('td:eq(3)').text();
    const status = row.find('td:eq(4) .badge').text();

    // Fill user view modal
    $('.user-detail-name').text(name);
    $('.user-detail-role').text(role);
    $('.user-detail-email').text(email);
    $('.user-detail-status')
    .removeClass('bg-success bg-danger')
    .addClass(status === 'Active' ? 'bg-success' : 'bg-danger')
    .text(status);

    // Show modal
    $('#userViewModal').modal('show');
});

    // Change user status
    $(document).on('click', '#usersTable .status-btn', function(e) {
    e.stopPropagation(); // Prevent row click event
    const row = $(this).closest('tr');
    const badge = row.find('td:eq(4) .badge');
    const isActive = badge.hasClass('bg-success');

    if (isActive) {
    if (confirm('Are you sure you want to deactivate this user?')) {
    badge.removeClass('bg-success').addClass('bg-danger').text('Inactive');
    $(this).find('i').removeClass('fa-ban').addClass('fa-check');
}
} else {
    if (confirm('Are you sure you want to activate this user?')) {
    badge.removeClass('bg-danger').addClass('bg-success').text('Active');
    $(this).find('i').removeClass('fa-check').addClass('fa-ban');
}
}
});

    // Save user
    $('#saveUserBtn').click(function() {
    if (!$('#userForm')[0].checkValidity()) {
    $('#userForm')[0].reportValidity();
    return;
}

    const firstName = $('#userFirstName').val();
    const lastName = $('#userLastName').val();
    const fullName = firstName + ' ' + lastName;
    const email = $('#userEmail').val();
    const role = $('#userRole option:selected').text();

    // Check if password and confirm password match
    const password = $('#userPassword').val();
    const confirmPassword = $('#userConfirmPassword').val();

    if (password !== confirmPassword) {
    alert('Passwords do not match!');
    return;
}

    // Add new user
    const newId = 'USR00' + ($('#usersTable tbody tr').length + 1);
    const newRow = `
            <tr data-id="${newId}">
                <td>${newId}</td>
                <td>${fullName}</td>
                <td>${email}</td>
                <td>${role}</td>
                <td><span class="badge bg-success">Active</span></td>
                <td>
                    <button class="btn btn-sm btn-info view-btn" data-bs-toggle="modal" data-bs-target="#userViewModal">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-warning status-btn">
                        <i class="fas fa-ban"></i>
                    </button>
                </td>
            </tr>
        `;
    $('#usersTable tbody').append(newRow);

    $('#userModal').modal('hide');
});

    // Handle appointment actions
    $(document).on('click', '#pendingAppointmentsTable .btn-success', function() {
    if (confirm('Are you sure you want to confirm this appointment?')) {
    const row = $(this).closest('tr').clone();
    $(this).closest('tr').remove();
    row.find('td:last-child').html(`
                <button class="btn btn-sm btn-success">Complete</button>
                <button class="btn btn-sm btn-danger">Cancel</button>
            `);
    $('#confirmedAppointmentsTable tbody').append(row);
}
});

    $(document).on('click', '#pendingAppointmentsTable .btn-danger', function() {
    if (confirm('Are you sure you want to reject this appointment?')) {
    const row = $(this).closest('tr').clone();
    $(this).closest('tr').remove();
    row.find('td:last-child').html(`
                <button class="btn btn-sm btn-info">View Details</button>
            `);
    $('#rejectedAppointmentsTable tbody').append(row);
}
});

    $(document).on('click', '#confirmedAppointmentsTable .btn-success', function() {
    if (confirm('Are you sure this appointment is completed?')) {
    const row = $(this).closest('tr').clone();
    $(this).closest('tr').remove();
    row.find('td:last-child').html(`
                <button class="btn btn-sm btn-info">View Details</button>
            `);
    $('#completedAppointmentsTable tbody').append(row);
}
});

    $(document).on('click', '#confirmedAppointmentsTable .btn-danger', function() {
    if (confirm('Are you sure you want to cancel this appointment?')) {
    const row = $(this).closest('tr').clone();
    $(this).closest('tr').remove();
    row.find('td:last-child').html(`
                <button class="btn btn-sm btn-info">View Details</button>
            `);
    $('#rejectedAppointmentsTable tbody').append(row);
}
});

    // Handle review actions
    $(document).on('click', '#reviews .btn-outline-danger', function() {
    if (confirm('Are you sure you want to hide this review?')) {
    $(this).closest('.card').fadeOut();
}
});

    $(document).on('click', '#reviews .btn-outline-primary', function() {
    const reviewerName = $(this).closest('.card-body').find('.card-title').text();
    alert('Replying to ' + reviewerName + '\'s review. This feature is under development.');
});

    // Handle mail actions
    $('.mail-list .list-group-item').click(function() {
    $('.mail-list .list-group-item').removeClass('active');
    $(this).addClass('active');
    // In a real app, you would load the email content here
});

    $('.card-footer .btn-primary').click(function() {
    alert('Reply feature is under development');
});

    $('.card-footer .btn-outline-secondary').click(function() {
    alert('Forward feature is under development');
});

    $('.card-footer .btn-outline-danger').click(function() {
    if (confirm('Are you sure you want to delete this message?')) {
    alert('Message deleted');
}
});

    // Complete booking action
    $(document).on('click', '#pendingBookingsTable .btn-success', function() {
    if (confirm('Are you sure this booking is completed?')) {
    $(this).closest('tr').find('td:eq(5) .badge')
    .removeClass('bg-warning')
    .addClass('bg-success')
    .text('Completed');
    $(this).prop('disabled', true).text('Completed');
}
});
});

package lk.ijse.cleancopvt.util;

import lk.ijse.cleancopvt.entity.Booking;
import org.springframework.stereotype.Component;

@Component
public class EmailUtil {

    // Send booking confirmation email
    public void sendBookingConfirmationEmail(String customerEmail, Booking booking) {
        // Logic to send email
        String subject = "Booking Confirmation";
        String message = "Dear Customer, your booking has been confirmed. Booking ID: " + booking.getId();
        sendEmail(customerEmail, subject, message);
    }

    // Send booking rejection email
    public void sendBookingRejectionEmail(String customerEmail, Booking booking) {
        // Logic to send email
        String subject = "Booking Rejection";
        String message = "Dear Customer, your booking has been rejected. Booking ID: " + booking.getId();
        sendEmail(customerEmail, subject, message);
    }

    // Generic method to send email
    private void sendEmail(String to, String subject, String message) {
        // Implement email sending logic (e.g., using JavaMailSender)
        System.out.println("Email sent to: " + to + " with subject: " + subject + " and message: " + message);
    }
}
